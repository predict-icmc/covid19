# Predição próximas 4 semanas
XX = c(df$tempo , max(sp$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(80,83), ncol=1))
matrix(c(80,83,43,43), ncol=2)
y_pred = predict(classifier, newdata = matrix(c(80,83,43,43), ncol=2))
matrix(c(80,81,82,83,43,43,43,43), ncol=2)
y_pred = predict(classifier, newdata = matrix(c(80,81,82,83,43,43,43,43), ncol=2))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
X = select(sp, c('tempo'))
Y = select(sp, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(sp$tempo , max(sp$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(89:92), ncol=1))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
sp_2 = subset(sp, sp$tempo<80)
#Juntando as bases de dados
df <- merge(sp_2,isola_sp,by=c('tempo'))
sp <- filter(dados, (dados$place_type == 'state')&(dados$state=='SP'))
sp = sp[order(sp$tempo),]
X = select(sp, c('tempo'))
Y = select(sp, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(sp$tempo , max(sp$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(89:92), ncol=1))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
# Com dados de isolamento
colnames(Estados)
X = select(df, c('tempo','indice'))
Y = select(df, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(df$tempo , max(df$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(80,81,82,83,43,43,43,43), ncol=2))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
X = select(df, c('tempo','indice'))
Y = select(df, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(df$tempo , max(df$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(80,81,82,83,43,43,43,43), ncol=2))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
isola_sp = subset(isolamento, isolamento$estado=='SP')
isola_sp$tempo<- as.numeric(as.Date(isola_sp$data, format='%d-%m-%y') -
min(as.Date(sp$date)))+7
isola_sp =subset(isola_sp,isola_sp$tempo>=0, select = c('tempo','indice'))
View(df)
View(isola_sp)
isola_sp$tempo<- as.numeric(as.Date(isola_sp$data, format='%d-%m-%y') -
min(as.Date(sp$date)))+7
View(isola_sp)
isola_sp = subset(isolamento, isolamento$estado=='SP')
View(isola_sp)
isola_sp$tempo<- as.numeric(as.Date(isola_sp$data, format='%d-%m-%y') -
min(as.Date(sp$date)))+7
View(isola_sp)
View(sp)
isola_sp =subset(isola_sp,isola_sp$tempo>=7, select = c('tempo','indice'))
View(sp)
sp_2 = subset(sp, (sp$tempo<80)&(sp$tempo>7))
#Juntando as bases de dados
df <- merge(sp_2,isola_sp,by=c('tempo'))
View(df)
sp_2 = subset(sp, (sp$tempo<80)&(sp$tempo>=7))
#Juntando as bases de dados
df <- merge(sp_2,isola_sp,by=c('tempo'))
View(df)
View(sp)
X = select(sp_2, c('tempo'))
Y = select(sp_2, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(sp_2, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(sp_2$tempo , max(sp_2$tempo)+(1:4))
sp_2 = subset(sp, (sp$tempo<80)&(sp$tempo>=7))
#Juntando as bases de dados
df <- merge(sp_2,isola_sp,by=c('tempo'))
# Somente com os dados temporais
colnames(Estados)
X = select(sp, c('tempo'))
Y = select(sp, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(sp$tempo , max(sp$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(89:92), ncol=1))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(sp, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
# Com dados de isolamento
colnames(Estados)
X = select(df, c('tempo','indice'))
Y = select(df, c('deaths'))
classifier = randomForest(X,Y$deaths,ntree = 100, random_state = 0)
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
geom_line(aes(x=tempo,y=classifier$predicted))+
labs(title = 'Mortes por COVID em Dias', subtitle='Estado de SP', x = 'Dias',
y = 'Número de óbitos', fill = 'estados') +
theme_bw()+
facet_wrap(~state, ncol = 9)
# Predição próximas 4 semanas
XX = c(df$tempo , max(df$tempo)+(1:4))
y_pred = predict(classifier, newdata = matrix(c(80,81,82,83,43,43,43,43), ncol=2))
y_pred
yp = c(classifier$predicted,y_pred)
predict<-data.frame(XX,yp)
ggplot(df, aes(x = tempo, y = deaths)) +
geom_point(size = 2, color = "blue") +
labs(title = 'Previsão de mortes por COVID em semanas', subtitle='Estado de SP', x = 'Semanas',
y = 'Número de óbitos', fill = 'estados') +
geom_line(aes(x=XX, y = yp),
data = predict,
colour = "red")+
theme_bw()
##########################################################################################################
################################### MODELO SEIR #############################################
library (deSolve)
##########################################################################################################
################################### MODELO SEIR #############################################
library (deSolve)
seir_model = function (current_timepoint, state_values, parameters)
{
# create state variables (local variables)
S = state_values [1]        # susceptibles
E = state_values [2]        # exposed
I = state_values [3]        # infectious
R = state_values [4]        # recovered
with (
as.list (parameters),     # variable names within parameters can be used
{
# compute derivatives
dS = (-beta * S * I)
dE = (beta * S * I) - (delta * E)
dI = (delta * E) - (gamma * I)
dR = (gamma * I)
# combine results
results = c (dS, dE, dI, dR)
list (results)
}
)
}
contact_rate = 3.2                     # number of contacts per day
transmission_probability = 0.07       # transmission probability
infectious_period = 10                # infectious period
latent_period = 5                     # latent period
beta_value = 1.75
gamma_value = 0.15
delta_value = 1 / latent_period
Ro = beta_value / gamma_value
parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)
W = 45919049 - 80558 - 6045      # susceptible hosts
X = 80558           # infectious hosts
Y = 0           # recovered hosts
Z = 1000         # exposed hosts
N = W + X + Y + Z
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (0, 90, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
plot (S ~ time, data = output, type='b', col = 'blue')
# susceptible hosts over time
plot (S ~ time, data = output, type='b', ylim = c(0,1), col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b', ylim = c(0,1), col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b', ylim = c(0,1), col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', ylim = c(0,1), col = 'green', ylab = '', axes = FALSE)
Y = 70000         # recovered hosts
W = 45919049 - 80558 - 6045      # susceptible hosts
X = 80558           # infectious hosts
Z = 1000         # exposed hosts
Y = 70000         # recovered hosts
N = W + X + Y + Z
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (0, 90, by=1)
plot (S ~ time, data = output, type='b', col = 'blue')
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
initial_values = c (S = W, E = X, I = Y, R = Z)
timepoints = seq (0, 90, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
plot (S ~ time, data = output, type='b', col = 'blue')
# susceptible hosts over time
plot (S ~ time, data = output, type='b', ylim = c(0,1), col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b', ylim = c(0,1), col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
plot (S ~ time, data = output, type='b', col = 'blue')
initial_values = c (S = W, E = X, I = Y, R = Z)
timepoints = seq (0, 90, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
plot (S ~ time, data = output, type='b', col = 'blue')
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
plot (S ~ time, data = output, type='b', col = 'blue')
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
W
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
W = 45919049 - 80558      # susceptible hosts
X = 80558           # infectious hosts
Y = 70000         # recovered hosts
Z = 1000         # exposed hosts
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Y = 45950         # recovered hosts
Z = 1000         # exposed hosts
N = W + X + Y + Z
W
initial_values = c (S = W, E = X, I = Y, R = Z)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Z = 50         # exposed hosts
Y = 45950         # recovered hosts
N = W + X + Y + Z
W
initial_values = c (S = W, E = X, I = Y, R = Z)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
contact_rate = 10                     # number of contacts per day
transmission_probability = 0.07       # transmission probability
infectious_period = 10                # infectious period
latent_period = 5                     # latent period
beta_value = contact_rate * transmission_probability
gamma_value = 1 / infectious_period
delta_value = 1 / latent_period
Ro = beta_value / gamma_value
parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Y = 45950         # recovered hosts
Z = 50         # exposed hosts
N = W + X + Y + Z
W
initial_values = c (S = W, E = X, I = Y, R = Z)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
beta_value
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
contact_rate = 10                     # number of contacts per day
transmission_probability = 0.07       # transmission probability
infectious_period = 10                # infectious period
beta_value = contact_rate * transmission_probability
latent_period = 5                     # latent period
gamma_value = 1 / infectious_period
delta_value = 1 / latent_period
Ro = beta_value / gamma_value
parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Y = 45950         # recovered hosts
Z = 50         # exposed hosts
N = W + X + Y + Z
W
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (80, 100, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Y = 45950         # recovered hosts
N = W + X + Y + Z
Z = 50         # exposed hosts
W
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (80, 120, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
contact_rate = 3                     # number of contacts per day
transmission_probability = 0.07       # transmission probability
infectious_period = 10                # infectious period
latent_period = 5                     # latent period
beta_value = contact_rate * transmission_probability
gamma_value = 1 / infectious_period
delta_value = 1 / latent_period
Ro = beta_value / gamma_value
parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)
W = 45919049 - 80558      # susceptible hosts
X = 29461          # infectious hosts
Y = 45950         # recovered hosts
Z = 50         # exposed hosts
N = W + X + Y + Z
W
initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
timepoints = seq (80, 120, by=1)
output = lsoda (initial_values, timepoints, seir_model, parameter_list)
# susceptible hosts over time
plot (S ~ time, data = output, type='b',  col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic')
# remain on same frame
par (new = TRUE)
# exposed hosts over time
plot (E ~ time, data = output, type='b',  col = 'pink', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# infectious hosts over time
plot (I ~ time, data = output, type='b',  col = 'red', ylab = '', axes = FALSE)
# remain on same frame
par (new = TRUE)
# recovered hosts over time
plot (R ~ time, data = output, type='b', col = 'green', ylab = '', axes = FALSE)
