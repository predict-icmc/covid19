col = "black", size = 0.23)+
scale_fill_viridis_c(option = 2) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 3) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 4) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 5) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 6) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 7) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 8) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
Regioes <- Estados %>%
mutate(Região = case_when(
state %in% c("SP","RJ","MG","ES")~"Sudeste",
state %in% c("PR","RS","SC")~"Sul",
state %in% c("AC","AP","AM","PA","RO","RR","TO")~"Norte",
state %in% c("AL","CE","BA","MA","PB","PI","PE","RN","SE")~"Nordeste",
state %in% c("DF","GO","MT","MS")~"Centro-Oeste"
))
p <-ggplot(Regioes,aes(x = tempo, y = obitos_dia, fill = Região))
p+geom_bar(stat = "identity", position = "fill")+
scale_y_continuous(labels = scales::percent) +
xlim(c(20,max(Regioes$tempo))) +
theme_bw()
p+geom_bar(stat = "identity", position = "fill")+
scale_y_continuous(labels = scales::percent) +
xlim(c(20,max(Regioes$tempo))) +
labs(title = 'Proporção de óbitos por COVID-19 por região', subtitle = "Nordeste",
x = 'Dias', y = 'Número de óbitos') +
theme_bw()
p+geom_bar(stat = "identity", position = "fill")+
scale_y_continuous(labels = scales::percent) +
xlim(c(20,max(Regioes$tempo))) +
labs(title = 'Proporção de óbitos por COVID-19 por região',
x = 'Dias', y = 'Proporção de óbitos') +
theme_bw()
library(ggplot2)
library(dplyr)
tabela4 <- c(80,102,86,94,86,106,105,110,127,97,
110,104,97,128,98,84,97,87,99,94,
105,104,84,77,125,85,80,104,103,109,
115,89,100,96,96,87,106,100,93)
tabela4 <- c(80,102,86,94,86,106,105,110,127,97,
110,104,97,128,98,84,97,87,99,94,
105,104,84,77,125,85,80,104,103,109,
115,89,100,96,96,87,106,100,102,93)
library(sf)
library(dplyr)
library(tmap)
library(brazilmaps)
library(ggplot2)
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
dados<-read.csv("https://brasil.io/dataset/covid19/caso?format=csv",header=TRUE)
dados$tempo<- as.numeric(as.Date(dados$date) - min(as.Date(dados$date)))
Estados <- filter(dados, place_type == 'state')
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
Sudeste <- filter(Estados, state == 'SP'|state == 'MG'|state == 'RJ'| state == 'ES')
ggplot(Sudeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Sudeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
mortes <- Estados %>%
filter(is_last == "True") %>%
select(state,city_ibge_code, deaths)
sum(mortes$deaths)
mapa <- get_brmap("State") %>%
inner_join(mortes, c("State" = "city_ibge_code"))
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 8) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
Regioes <- Estados %>%
mutate(RegiÃ£o = case_when(
state %in% c("SP","RJ","MG","ES")~"Sudeste",
state %in% c("PR","RS","SC")~"Sul",
state %in% c("AC","AP","AM","PA","RO","RR","TO")~"Norte",
state %in% c("AL","CE","BA","MA","PB","PI","PE","RN","SE")~"Nordeste",
state %in% c("DF","GO","MT","MS")~"Centro-Oeste"
))
p <-ggplot(Regioes,aes(x = tempo, y = obitos_dia, fill = RegiÃ£o))
p+geom_bar(stat = "identity", position = "fill")+
scale_y_continuous(labels = scales::percent) +
xlim(c(20,max(Regioes$tempo))) +
labs(title = 'ProporÃ§Ã£o de Ã³bitos por COVID-19 por regiÃ£o',
x = 'Dias', y = 'ProporÃ§Ã£o de Ã³bitos') +
theme_bw()
Estados <- filter(dados, place_type == 'state')
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
ggplot(Estados, aes(x = tempo, y = obitos_dia)) +
geom_line (size = 1, color = "blue") +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', x = 'Dias',
y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(15,30,45,60)) +
theme_bw()+
facet_wrap(~state, ncol = 9)
Sudeste <- filter(Estados, state == 'SP'|state == 'MG'|state == 'RJ'| state == 'ES')
ggplot(Sudeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Sudeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
View(dados)
library(qcc)
library(ggplot2)
library(dplyr)
library(qcc)
tabela4 <- c(80,102,86,94,86,106,105,110,127,97,
110,104,97,128,98,84,97,87,99,94,
105,104,84,77,125,85,80,104,103,109,
115,89,100,96,96,87,106,100,102,93)
Xb <- mean(tabela4)
n <- 40
sigma <- sd(tabela4)
LSE <- Xb + (sigma)/root(n)
LSE <- Xb + (sigma)/sqrt(n)
LIE <- Xb - (sigma)/sqrt(n)
LIE <- Xb - 3*((sigma)/sqrt(n))
LSE <- Xb + 3*((sigma)/sqrt(n))
LSE <- Xb + 6*((sigma)/sqrt(n))
LIE <- Xb - 6*((sigma)/sqrt(n))
sigma <- 1
LSE <- Xb + 6*((sigma)/sqrt(n))
LIE <- Xb - 6*((sigma)/sqrt(n))
LIE <- Xb - 6*((sigma)/sqrt(n))
sigma <- sd(tabela4)
n <- 40
Xb <- mean(tabela4)
sigma <- sd(tabela4)
Estimando os Limites da amostra
```{r}
LSE <- Xb + 6*((sigma)/sqrt(n))
LIE <- Xb - 6*((sigma)/sqrt(n))
```
Estimando os Limites da amostra
```{r}
LSE <- Xb + 6*((sigma)/sqrt(n))
LIE <- Xb - 6*((sigma)/sqrt(n))
```
LIE <- Xb - 3*((sigma)/sqrt(n))
LSE <- Xb + 3*((sigma)/sqrt(n))
n <- 10
n <- 4
tabela4 <- data.fame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = (103,109,
tabela4 <- data.fame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
(ggplot2)
(ggplot2)
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
View(tabela4)
tabela4$media <- mean(tabela4)
View(tabela4)
tabela4$media <- apply(tabela4[1:10],1, mean)
tabela4$media <- apply(tabela4[1:10],1, mean)
tabela4 <- T(tabela4)
tabela4 <- T(tabela4)
tabela4 <- t(tabela4)
View(tabela4)
tabela4
tabela4 <- t(tabela4)
tabela4$media <- apply(tabela4[1:4],1, mean)
t
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4 <- t(tabela4)
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4$media <- aply(tabela[1:10],1, mean)
tabela4$media <- apply(tabela[1:10],1, mean)
tabela4$media <- apply(tabela4[1:10],1, mean)
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
View(tabela4)
View(tabela4)
library(ggplot2)
library(dplyr)
library(qcc)
tabela4
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4$media <- mean(tabela4[1:4])
tabela4$media <- mean(tabela4)
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4$media <- apply(tabela4[1:4],2, mean)
tabela4$media <- apply(tabela4[1:4],10, mean)
tabela4$media <- apply(tabela4[1:4],1, mean)
tabela4$media <- apply(tabela4[1:4], mean)
tabela4$media <- apply(tabela4[1:4],1, mean)
?apply
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4$media <- apply(tabela4,2,mean)
tabela4$media <- apply(tabela4,4,mean)
tabela4$media <- apply(tabela4,10,mean)
View(tabela4)
tabela4$x_barra<-rowMeans(tabela4[,c(1:10)])
tabela4$x_barra<-columnMeans(tabela4[,c(1:10)])
tabela4$x_barra<-columnMeans(tabela4[,c(1:4)])
tabela4 <- t(tabela4)
tabela4$x_barra<-columnMeans(tabela4[,c(1:4)])
tabela4$x_barra<-columnMeans(tabela4[,c(1:10)])
tabela4$x_barra<-rowMeans(tabela4[,c(1:10)])
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
tabela4$x_barra<-rowMeans(tabela4[,c(1:10)])
as.data.frame(tabela4)
tabela4$x_barra<-rowMeans(tabela4[,c(1:10)])
as.data.frame(tabela4)
tabela4$x_barra<-rowMeans(tabela4[,c(1:4)])
tabela4$x_barra<-rowMeans(tabela4[,c(1:10)])
tabela4$x_barra<-rowMeans(tabela4[,c(1:4)])
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
as.data.frame(tabela4)
tabela4 <-as.data.frame(tabela4)
tabela4
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
tabela4 <-as.data.frame(tabela4)
tabela4$x_barra<-rowMeans(tabela4[,c(1:4)])
View(tabela4)
tabela4$sd <- rowSd(tabela4[,c(1:4)])
tabela4$sd <- apply(tabela4[,c(1:4)],1, sd)
View(tabela4)
View(tabela4)
tabela4$sd <- apply(tabela4[,c(1:4)],1, (max(tabela4) - min(tabela4)))
tabela4$sd <- apply(tabela4[,c(1:4)],1, (max(tabela4[,c(1:4)]) - min(tabela4[,c(1:4)])))
tabela4$sd <- apply(tabela4[,c(1:4)],1, range)
tabela4$ampli <- apply(tabela4[,c(1:4)],1, range)
tabela4$ampli <- apply(tabela4[,c(1:4)],1, sd)
tabela4$sd <- apply(tabela4[,c(1:4)],1, sd)
tabela4 <- data.frame('1' = c(80,102,86,94),'2' = c(86,106,105,110),'3' = c(127,97,
110,104), '4' = c(97,128,98,84),'5' = c(97,87,99,94),
'6' = c(105,104,84,77), '7' = c(125,85,80,104), '8' = c(103,109,
115,89),'9' = c(100,96,96,87),'10' = c(106,100,102,93))
tabela4 <- t(tabela4)
tabela4 <-as.data.frame(tabela4)
tabela4$x_barra <- rowMeans(tabela4[,c(1:4)])
tabela4$sd <- apply(tabela4[,c(1:4)],1, sd)
amplit<- function(x){
(max(x)-min(x))
}
tabela$ampli <- apply(tabela4[,c(1:4)],1, amplit)
tabela4$ampli <- apply(tabela4[,c(1:4)],1, amplit)
med <- mean(tabela4$x_barra)
d2 <- 3,078
d2 <- 3.078
sd <- mean(tabela4$ampli)
sd <- mean(tabela4$ampli)/d2
n <- 10
LSE <- med + 3*sd/sqrt(n)
LIE <- med - 3*sd/sqrt(n)
Cp <- (LSE - LIE)/(6*sd)
LSE2 <- 120
CPe <- (LSE2 - LIE)/(6*sd)
Xq2 <- 16
Xq1 <- 2.56
Xq2 <- 16
IC1 <- CPe* sqrt(Xq1/19)
IC2 <- CPe * sqrt(Xq2/19)
library(sf)
library(dplyr)
library(tmap)
library(brazilmaps)
library(ggplot2)
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
dados<-read.csv("https://brasil.io/dataset/covid19/caso?format=csv",header=TRUE)
dados$tempo<- as.numeric(as.Date(dados$date) - min(as.Date(dados$date)))
Estados <- filter(dados, place_type == 'state')
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
Sudeste <- filter(Estados, state == 'SP'|state == 'MG'|state == 'RJ'| state == 'ES')
dados<-read.csv("https://brasil.io/dataset/covid19/caso?format=csv",header=TRUE)
dados$tempo<- as.numeric(as.Date(dados$date) - min(as.Date(dados$date)))
Estados <- filter(dados, place_type == 'state')
Sudeste <- filter(Estados, state == 'SP'|state == 'MG'|state == 'RJ'| state == 'ES')
ggplot(Sudeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Sudeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
Norte<-filter(Estados,state=="AC"|state=="AP"| state=="AM" | state=="PA"| state=="RO"| state=="RR"| state=="TO")
ggplot(Norte, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Norte",
x = 'Dias', y = 'NÃºmero de Ã³bitos') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
Sudeste <- filter(Estados, state == 'SP'|state == 'MG'|state == 'RJ'| state == 'ES')
ggplot(Sudeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Sudeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
ggplot(Norte, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Norte",
x = 'Dias', y = 'NÃºmero de Ã³bitos') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
Estados <- Estados %>%
group_by(state) %>%
arrange(tempo) %>%
mutate(obitos_dia = deaths - lag(deaths, defaut = first(deaths)))
Nordeste<-filter(Estados,state=="AL"|state=="BA"| state=="CE" | state=="MA"| state=="PB"| state=="PI"| state=="PE"|state=="RN"| state=="SE")
ggplot(Nordeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias', subtitle = "Nordeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
Centroeste<-filter(Estados,state=="DF"|state=="GO"| state=="MT"|state=="MS")
ggplot(Centroeste, aes(x = tempo, y = obitos_dia, group = state)) +
geom_line(aes(col = state), size = 1) +
labs(title = 'Crescimento dos casos de Ã³bito por COVID-19 em dias',subtitle = "Centro Oeste",
x = 'Dias', y = 'NÃºmero de Ã³bitos', fill = 'estados') +
scale_x_discrete(limits=c(7,14,21,28,35,42,49,56,63)) +
theme_bw()
mortes <- Estados %>%
filter(is_last == "True") %>%
select(state,city_ibge_code, deaths)
sum(mortes$deaths)
mapa <- get_brmap("State") %>%
inner_join(mortes, c("State" = "city_ibge_code"))
mapa %>%
ggplot() +
geom_sf(aes(fill = deaths),
col = "black", size = 0.23)+
scale_fill_viridis_c(option = 8) +
theme(panel.grid = element_line(colour = "transparent"),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
library(rstudioapi)
library(tidyverse)
library(dplyr)
# - - - - - - - - - - --  - - - -
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#função para arrumar o indice de isolamento para um valor possivel de contas
arrumar_dados <- function(df){
df$Índice.de.isolamento <- str_replace_all(df$Índice.de.isolamento,"%","")
df$Índice.de.isolamento <- as.numeric(df$Índice.de.isolamento)
return(df)
}
my_files <- list.files(pattern = ".csv")#sai em formato de lista
# 3. Lendo todos os arquivos, o lapply aplica a mesma função para todos os arquivos da lista
BDiso <- lapply(my_files, read_csv)
#6 juntando em um dataset, uso a função do dplyr::bind_rows(data(ou lista de datasets),
#id = ("nome da coluna de identificação")), o id é usado para identificar de qual dataset está vindo
BDiso <- bind_rows(BDiso, .id = "dataset(dia)")
#Uso a função separate para que eu possa separar as colunas da banco de dados, já que elas vieram numa só
BDiso <- BDiso %>% separate(`Município;UF;Cdufmun;DATA;Escala de cor;Número de registros;População;Índice de isolamento`,
into = c("cidade","UF","Cdufmun","DATA","Escala.de.cor","Número de registros","População","Índice.de.isolamento"),
sep = ";")
BDiso <- arrumar_dados #arrumei a coluna indice de isolamento.
BDiso$DATA <- as.Date(BDiso$DATA, "%d/%m/%y")
BDiso <- BDiso %>%
arrange(DATA)
#função para arrumar o indice de isolamento para um valor possivel de contas
arrumar_dados <- function(df){
df$Índice.de.isolamento <- str_replace_all(df$Índice.de.isolamento,"%","")
df$Índice.de.isolamento <- as.numeric(df$Índice.de.isolamento)
return(df)
}
my_files <- list.files(pattern = ".csv")#sai em formato de lista
# 3. Lendo todos os arquivos, o lapply aplica a mesma função para todos os arquivos da lista
BDiso <- lapply(my_files, read_csv)
#6 juntando em um dataset, uso a função do dplyr::bind_rows(data(ou lista de datasets),
#id = ("nome da coluna de identificação")), o id é usado para identificar de qual dataset está vindo
BDiso <- bind_rows(BDiso, .id = "dataset(dia)")
#Uso a função separate para que eu possa separar as colunas da banco de dados, já que elas vieram numa só
BDiso <- BDiso %>% separate(`Município;UF;Cdufmun;DATA;Escala de cor;Número de registros;População;Índice de isolamento`,
into = c("cidade","UF","Cdufmun","DATA","Escala.de.cor","Número de registros","População","Índice.de.isolamento"),
sep = ";")
BDiso <- arrumar_dados #arrumei a coluna indice de isolamento.
BDiso$DATA <- as.Date(BDiso$DATA, "%d/%m/%y")
BDiso$DATA <- as.Date(BDiso$DATA, "%d/%m/%y")
View(BDiso)
View(BDiso)
my_files <- list.files(pattern = ".csv")#sai em formato de lista
# 3. Lendo todos os arquivos, o lapply aplica a mesma função para todos os arquivos da lista
BDiso <- lapply(my_files, read_csv)
#6 juntando em um dataset, uso a função do dplyr::bind_rows(data(ou lista de datasets),
#id = ("nome da coluna de identificação")), o id é usado para identificar de qual dataset está vindo
BDiso <- bind_rows(BDiso, .id = "dataset(dia)")
#Uso a função separate para que eu possa separar as colunas da banco de dados, já que elas vieram numa só
BDiso <- BDiso %>% separate(`Município;UF;Cdufmun;DATA;Escala de cor;Número de registros;População;Índice de isolamento`,
into = c("cidade","UF","Cdufmun","DATA","Escala.de.cor","Número de registros","População","Índice.de.isolamento"),
sep = ";")
BDiso <- arrumar_dados #arrumei a coluna indice de isolamento.
BDiso <- arrumar_dados(BDiso) #arrumei a coluna indice de isolamento.
my_files <- list.files(pattern = ".csv")#sai em formato de lista
# 3. Lendo todos os arquivos, o lapply aplica a mesma função para todos os arquivos da lista
BDiso <- lapply(my_files, read_csv)
#6 juntando em um dataset, uso a função do dplyr::bind_rows(data(ou lista de datasets),
#id = ("nome da coluna de identificação")), o id é usado para identificar de qual dataset está vindo
BDiso <- bind_rows(BDiso, .id = "dataset(dia)")
#Uso a função separate para que eu possa separar as colunas da banco de dados, já que elas vieram numa só
BDiso <- BDiso %>% separate(`Município;UF;Cdufmun;DATA;Escala de cor;Número de registros;População;Índice de isolamento`,
into = c("cidade","UF","Cdufmun","DATA","Escala.de.cor","Número de registros","População","Índice.de.isolamento"),
sep = ";")
View(BDiso)
BDiso <- arrumar_dados(BDiso) #arrumei a coluna indice de isolamento.
BDiso$DATA <- as.Date(BDiso$DATA, "%d/%m/%y")
BDiso <- BDiso %>%
arrange(DATA)
??rstudioapi
write.csv(BDiso, "C:\Users\Yuri Reis Valete\Desktop\Projetos\PREDICT\taxa de isolamento", row.names = F)
write.csv(BDiso, "C:\\Users\\Yuri Reis Valete\\Desktop\\Projetos\\PREDICT\\taxa de isolamento", row.names = F)
write.csv(BDiso, "C:\\Users\\Yuri Reis Valete\\Desktop\\Projetos\\PREDICT\\taxa de isolamento", row.names = F)
write.csv(BDiso, "C:\\Users\\Yuri Reis Valete\\Desktop\\Projetos\\PREDICT\\taxa de isolamento", row.names = F)
write.csv(BDiso, "C:\\Users\\Yuri Reis Valete\\Desktop\\Projetos\\PREDICT\\taxa de isolamento\\pinto.csv", row.names = F)
write.csv(BDiso, "C:\\Users\\Yuri Reis Valete\\Desktop\\Projetos\\PREDICT\\taxa de isolamento\\isolamento.csv", row.names = F)
